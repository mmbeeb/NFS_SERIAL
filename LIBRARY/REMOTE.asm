

	;********************************
	;*           REM0TE             *
	;* Update by Martin Mather 2022 *
	;********************************

	;* Assembled using beebasm 1.09 *

	;THIS IS THE MASTER VERSION.	

	;THE NFS RESERVES A RECEIVE CONTROL BLOCK IN IT'S PRIVATE WORKSPACE
	;FOR USE BY REMOTE.  THIS IS IN THE SECOND PAGE OF PWS AT &0C.

	LOADADDR2=?&0E0E

	GSINIT=?&FFC2
	GSREAD=?&FFC5
	OSARGS=?&FFDA
	OSASCI=?&FFE3
	OSNEWL=?&FFE7
	OSWRCH=?&FFEE
	OSWORD=?&FFF1
	OSBYTE=?&FFF4
	
	EVENTV=?&0220

	TXTPTR=?&F2

	CLEAR LOADADDR2, LOADADDR2+&200
	ORG LOADADDR2

.REMOTE_START
{
	MM=TRUE;SOME CHANGES TO REDUCE CODE SIZE

	PTR=&9E

IF MM
.FLAG
ELSE
	FLAG=&0E0D;MASTER VERSION STILL USES &0E0D!
ENDIF

	;GET STATION
{
	;STATION NUMBER?
	LDX #&07
	LDY #&FF
	JSR S_DEC2
	BCC L_DD55;IF READ, A=STATION, X=NET

	;USER NAME?
.L_DD09
	LDA (TXTPTR),Y
	CMP #&21
	INY
	BNE L_DD14

.D_0E1E;THESE FOUR BYTES GET OVERWRITTEN BY THE NFS
	EQUD 0

.L_DD14
	BCS L_DD18

	LDA #&0D

.L_DD18
	STA FS_BLK,X
	INX
	EOR #&0D
	BNE L_DD09

IF NOT(MM)
	STA FS_BLK

	LDA #&18
	STA FS_BLK+3
	STX FS_BLK+1
ENDIF

	;GET STATION & NET FROM FILE SERVER
	LDX #LO(FS_BLK)
	LDY #HI(FS_BLK)
	LDA #&14
	JSR OSWORD

	LDA FS_BLK+3
	BEQ L_DD41;USER FOUND

	;REPORT ERROR
	LDA #&00
	STA FS_BLK+17
	JMP FS_BLK+2

.L_DD41
IF NOT(MM)
	LDA #17
	STA FS_BLK+3

	LDA #&13
	LDX #LO(FS_BLK+3)
	LDY #HI(FS_BLK+3)
	JSR OSWORD;TRANSLATE NET NUMBER
ENDIF

	LDA FS_BLK+5;STATION
	LDX FS_BLK+6;NETWORK
}

.L_DD55;A=STATION, X=NET
{
IF MM
	STA D_DEE9+2
	STX D_DEE9+3
	
	STA D_DEF7+2
	STX D_DEF7+3
	
	LDA PTR+1
	STA D_DEF7+5
	STA D_DEF7+9
ELSE
	LDY #&0E
	STA (PTR),Y;STATION
	INY
	TXA
	STA (PTR),Y;NET
ENDIF
	
	JSR S_DE4E_SETUP_RX
	JSR S_DE2E_POP_TX
	
	LDX #1;OS PROCEDURE 1 = REMOTE
	STX OW_BLK+12

	;SET EVENTV
.L_DD68
	LDA EVENTV,X
	STA &C4,X
	LDA D_DE00,X
	STA EVENTV,X
	DEX
	BPL L_DD68

	;TRANSMIT LOOP
.L_DD76_LOOP1
IF MM
	JSR TRANSMIT_OW_BLK
ELSE
	LDX #LO(OW_BLK)
	LDY #HI(OW_BLK)
	JSR S_DE6B_TRANSMIT;SEND OS PROCEDURE REQUEST
ENDIF
	
	;A=0
	STA FLAG;:=0
	
	ASL D_DEFF
	BCC L_DD8A_LOOP2

	;DO THIS AFTER 7 LOOPS?
	LDA #&0E;ENABLE EVENTS
	JSR S_DE13

	;RECEIVE LOOP
.L_DD8A_LOOP2
	LDA #&0C
	STA &A0
	LDA PTR+1
	STA &A1;A0 -> RX CONTROL BLOCK
	
	;POLL RECEIVE
	LDX #0
	LDA (&A0,X)
	BMI L_DDAA;GOT SOMETHING!
	
	LDA FLAG
	BEQ L_DD8A_LOOP2
	
	CMP #&02
	BEQ L_DDA5
	
	LDA #&1B
	STA &C0
	
.L_DDA5
	JSR S_DE2E_POP_TX;OS PROCEDURE 4, SEND KEY OR *ROFF ETC.
	BNE L_DD76_LOOP1;ALWAYS
	
.L_DDAA
	LDY #&D9
	LDA (PTR),Y;FIRST BYTE RECEIVED
	BEQ L_DDF7;IF 0, VDU NEXT BYTE
	
	CMP #&0A
	BEQ L_DE02
	
	CMP #&01
	BEQ L_DDEB
	
	PHA
	
.L_DDB9
	INY
	
.L_DDBA
	LDA (PTR),Y
	PHA
	INY
	CPY #&DD
	BNE L_DDBA
	
	PLA
	TAY
	PLA
	TAX
	PLA
	JSR OSBYTE
	PHP
	PHA
	TXA
	PHA
	TYA
	PHA
	LDY #&DA
	
.L_DDD2
	PLA
	STA (PTR),Y
	INY
	CPY #&DE
	BNE L_DDD2
	
	PLA
	CMP #&02
	BEQ L_DDE6
	
	LDY PTR+1
	LDX #&0C
	JSR S_DE6B_TRANSMIT
	
.L_DDE6
	JSR S_DE4E_SETUP_RX
	BNE L_DD8A_LOOP2;ALWAYS
	
	
.L_DDEB
	INY
	LDA (PTR),Y
	LDX #&DB
	LDY PTR+1
	JSR OSWORD
	BNE L_DDE6
	
.L_DDF7
	INY
	LDA (PTR),Y
	JSR OSWRCH
	JMP L_DDE6
	
IF LOADADDR2=&0E0E
	ORG &F09
	
	EQUD &FFFF0E0E
ENDIF
	
.D_DE00
	EQUW S_DE1D;EVENTV VALUE
}
	
	;RESTORE EVENTV
.L_DE02
{
	LDX #2
	
.L_DE04
	LDA &C3,X
	STA EVENTV-1,X
	DEX
	BNE L_DE04
	;X=0
	
	LDA #&0F;FLUSH ALL BUFFERS
	JSR OSBYTE
	
	LDA #&0D;DISABLE EVENTS
}
	
.S_DE13
	LDX #2
	JSR OSBYTE
	
	LDX #6
	JMP OSBYTE

	;EVENT?
.S_DE1D
{
	CMP #2
	BEQ L_DE25;CHAR ENTERING INPUT BUFFER
	
	CMP #6
	BNE L_DE2B
	
	;ESCAPE DETECTED
.L_DE25
	STA FLAG;:=0 OR :=2
	STY &C0
	RTS
	
.L_DE2B
	JMP (&00C4)
}
	
	
.S_DE2E_POP_TX
{
	LDA #&91
	LDX #&00
	JSR OSBYTE;GET CHAR FROM KEYBOARD BUFFER
	
	;POP OSWORD CONTROL BLOCK
	;TO TRANSMIT OS PROCEDURE 4 REQUEST
	LDX #&0D
	
.L_DE37
	LDA D_DEE9,X
	STA OW_BLK,X
	DEX
	BPL L_DE37

IF NOT(MM)	
	;COPY STATION & NET FROM PWS+&0F TO CONTROL BLOCK
	
	LDY #&0F
	LDX #&01
	
.L_DE44
	LDA (PTR),Y
	STA OW_BLK+2,X
	DEY
	DEX
	BPL L_DE44
ENDIF
	
	RTS;EXITS WITH Z=0
}
	
	;SET UP RECEIVE BUFFER, PORT &93
	;CONTROL BLOCK IN PWS AT &0C (RESERVED FOR USE BY REMOTE)
	;16 BYTE BUFFER IN PWS AT &D9
.S_DE4E_SETUP_RX
{
	LDY #&17
IF MM
	LDX #11
ELSE
	LDX #7
ENDIF

.L_DE52
	LDA D_DEF7,X
IF NOT(MM)
	BNE L_DE59
	
	LDA PTR+1
	
.L_DE59
ENDIF
	STA (PTR),Y
	DEY
	DEX
	BPL L_DE52

IF NOT(MM)
	DEY
	LDA #&93
	DEY
	STA (PTR),Y;PORT
	
	LDA #&7F
	DEY;Y:=&0C
	STA (PTR),Y;CONTROL
ENDIF
	RTS;EXITS WITH Z=0
}

IF MM
.TRANSMIT_OW_BLK
	LDX #LO(OW_BLK)
	LDY #HI(OW_BLK)
ENDIF
	
	;TRANSMIT
	;CONTROL BLOCK @ Y:X
.S_DE6B_TRANSMIT
{
	STX &C1
	STY &C2
	
.L_DE6F
	LDA #&13
	JSR OSBYTE;WAIT FOR VERTICAL SYNC
	
	LDX &C1
	LDY &C2
	LDA #&10
	JSR OSWORD;TRANSMIT
	
	LDA #&7E
	BIT &FF
	BPL L_DE8F
	
	JSR OSBYTE
	BRK
	EQUS 17, "Escape", 0
	
.L_DE8F
	LDA #&32
	JSR OSBYTE;POLL
	TXA
	BMI L_DE8F
	BNE L_DE6F
	
	RTS;EXITS WITH A = 0
}

	;ATTEMPT TO READ STATION & NET NUMBERS AT TXTPTR
	;EXITS WITH C=0 IF READ, A=STATION, X=NET

.FS_BLK;OVERWRITTEN WITH OSWORD BLOCK
IF MM
	;OSWORD &14 BLOCK
	;GET USER'S STATION FROM FILE SERVER
	EQUB 0, 30, 0, 24
ENDIF
OW_BLK=FS_BLK+19

{
.L_DE9A
	TAX
	LDA #&00
	STA &B2
	
.L_DE9F
	LDA (TXTPTR),Y
	CMP #&40
	BCS L_DEBE
	
	CMP #&2E
	BEQ L_DEBF
	BMI L_DEBE
	
	AND #&0F
	STA &B3
	ASL &B2
	LDA &B2
	ASL A
	ASL A
	ADC &B2
	ADC &B3
	STA &B2
	INY
	BNE L_DE9F
	
.L_DEBE
	CLC
	
.L_DEBF
	LDA &B2
	
.L_DEC1
	RTS
	
.*S_DEC2
	INY
	LDA (TXTPTR),Y
	CMP #&0D
	BEQ L_DEDC
	
	CMP #&20
	BNE S_DEC2
	
.L_DECD
	INY
	LDA (TXTPTR),Y
	CMP #&20
	BEQ L_DECD
	
	CMP #&41
	BCS L_DEC1
	
	CMP #&0D
	BNE L_DEDF
	
.L_DEDC
	BRK
	EQUB &DE, 0
	
.L_DEDF
	LDA #&00
	JSR L_DE9A
	BCC L_DEC1
	
	INY
	BCS L_DE9A
}
	
.D_DEE9
	EQUD &85
	EQUD &FFFF00C0
	EQUD &FFFF00C1
	EQUW 4
	
.D_DEF7
IF MM
	EQUB &7F
	EQUB &93
	EQUW 0
ENDIF
	EQUD &FFFF00D9
	EQUD &FFFF00E9
}

.D_DEFF
	EQUB &80

.REMOTE_END

	SAVE "$.REMOTE", REMOTE_START, REMOTE_END

